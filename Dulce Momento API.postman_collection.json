{
	"info": {
		"_postman_id": "4b8ea8a3-3f6f-4513-9aed-cfd0ec0fc85f",
		"name": "Dulce Momento API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29833560"
	},
	"item": [
		{
			"name": "get products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:7000/api/product",
					"host": [
						"localhost"
					],
					"port": "7000",
					"path": [
						"api",
						"product"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "get one product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:7000/api/product/22",
					"host": [
						"localhost"
					],
					"port": "7000",
					"path": [
						"api",
						"product",
						"22"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "add product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Тортик 9",
							"type": "text"
						},
						{
							"key": "price",
							"value": "999",
							"type": "text"
						},
						{
							"key": "img",
							"type": "file",
							"src": "/C:/Users/tima4/Desktop/examplepics/81e7798c05eb6b3f19ac9c7e3b724844.jpg"
						},
						{
							"key": "info",
							"value": "[{\"title\":\"Тип\", \"info\":\"Торт\"}]",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "localhost:7000/api/product",
					"host": [
						"localhost"
					],
					"port": "7000",
					"path": [
						"api",
						"product"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "update one product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJhZG1pbkByb3NzLmNvbSIsInJvbGUiOiJBRE1JTiIsImlhdCI6MTcxNTM1MTUxMCwiZXhwIjoxNzE1NDM3OTEwfQ.nod57cyWORR2raUTbO_LqdM27N5j2faXksxPPEJeb08"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Тортик Ням",
							"type": "text"
						},
						{
							"key": "img",
							"type": "file",
							"src": "/C:/Users/tima4/Desktop/examplepics/81e7798c05eb6b3f19ac9c7e3b724844.jpg"
						}
					]
				},
				"url": {
					"raw": "localhost:7000/api/product/2",
					"host": [
						"localhost"
					],
					"port": "7000",
					"path": [
						"api",
						"product",
						"2"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "delete one product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiZW1haWwiOiJhZG1pbkByb3NzLmNvbSIsInJvbGUiOiJBRE1JTiIsImlhdCI6MTcxNTI5NzY1NiwiZXhwIjoxNzE1Mzg0MDU2fQ.lOBvsuN_LCgdnG2rCLzMtN8cIryMrV_aEDa3JC_p8GQ"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "localhost:7000/api/product",
					"host": [
						"localhost"
					],
					"port": "7000",
					"path": [
						"api",
						"product"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "signup admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\":\"Admin\",\n    \"surname\":\"Ross\",\n    \"patronymic\": null,\n    \"email\": \"admin@ross.com\",\n    \"password\":\"blahblah\",\n    \"role\": \"ADMIN\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:7000/api/client/signup",
					"host": [
						"localhost"
					],
					"port": "7000",
					"path": [
						"api",
						"client",
						"signup"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "signup user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\":\"Bob\",\n    \"surname\":\"Ross\",\n    \"patronymic\": null,\n    \"email\": \"Bob@ross.com\",\n    \"password\":\"blahblah\",\n    \"role\": \"USER\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:7000/api/client/signup",
					"host": [
						"localhost"
					],
					"port": "7000",
					"path": [
						"api",
						"client",
						"signup"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "signin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "email",
							"value": "Bob@ross.com",
							"type": "text"
						},
						{
							"key": "password",
							"value": "blahblah",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "localhost:7000/api/client/signin",
					"host": [
						"localhost"
					],
					"port": "7000",
					"path": [
						"api",
						"client",
						"signin"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "signin admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "email",
							"value": "bob@ross.com",
							"type": "text"
						},
						{
							"key": "password",
							"value": "blahblah",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "localhost:7000/api/client/signin",
					"host": [
						"localhost"
					],
					"port": "7000",
					"path": [
						"api",
						"client",
						"signin"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "check user auth",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJib2JAcm9zcy5jb20iLCJyb2xlIjoiVVNFUiIsImlhdCI6MTcxNTI5Njg5OCwiZXhwIjoxNzE1MzgzMjk4fQ.glRfTqFj_wP8pxiBlMuIyYQTzFMif1OUA4FlSlR241Q",
						"type": "text"
					}
				],
				"url": {
					"raw": "localhost:7000/api/client/auth",
					"host": [
						"localhost"
					],
					"port": "7000",
					"path": [
						"api",
						"client",
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "add product info",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiZW1haWwiOiJhZG1pbkByb3NzLmNvbSIsInJvbGUiOiJBRE1JTiIsImlhdCI6MTcxNTM0OTAyMiwiZXhwIjoxNzE1NDM1NDIyfQ.qyzI2MX1_WLJ-cxwVVEXG34pbGz9IVWldHGejsyXPn0"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "title",
							"value": "Цвет",
							"type": "text"
						},
						{
							"key": "info",
							"value": "Вкусный",
							"type": "text"
						},
						{
							"key": "productId",
							"value": "22",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "localhost:7000/api/info/",
					"host": [
						"localhost"
					],
					"port": "7000",
					"path": [
						"api",
						"info",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "delete one info",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiZW1haWwiOiJhZG1pbkByb3NzLmNvbSIsInJvbGUiOiJBRE1JTiIsImlhdCI6MTcxNTM0OTAyMiwiZXhwIjoxNzE1NDM1NDIyfQ.qyzI2MX1_WLJ-cxwVVEXG34pbGz9IVWldHGejsyXPn0"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "localhost:7000/api/info/8",
					"host": [
						"localhost"
					],
					"port": "7000",
					"path": [
						"api",
						"info",
						"8"
					]
				}
			},
			"response": []
		},
		{
			"name": "get product infos",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "localhost:7000/api/info/",
					"host": [
						"localhost"
					],
					"port": "7000",
					"path": [
						"api",
						"info",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "add rating",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJhZG1pbkByb3NzLmNvbSIsInJvbGUiOiJBRE1JTiIsImlhdCI6MTcxNTM1MTUxMCwiZXhwIjoxNzE1NDM3OTEwfQ.nod57cyWORR2raUTbO_LqdM27N5j2faXksxPPEJeb08"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "rating",
							"value": "5",
							"type": "text"
						},
						{
							"key": "comment",
							"value": "Вкусно!!!",
							"type": "text"
						},
						{
							"key": "productId",
							"value": "4",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "localhost:7000/api/rating",
					"host": [
						"localhost"
					],
					"port": "7000",
					"path": [
						"api",
						"rating"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete one rating",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJhZG1pbkByb3NzLmNvbSIsInJvbGUiOiJBRE1JTiIsImlhdCI6MTcxNTM1MTUxMCwiZXhwIjoxNzE1NDM3OTEwfQ.nod57cyWORR2raUTbO_LqdM27N5j2faXksxPPEJeb08"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "localhost:7000/api/rating/17",
					"host": [
						"localhost"
					],
					"port": "7000",
					"path": [
						"api",
						"rating",
						"17"
					]
				}
			},
			"response": []
		},
		{
			"name": "update one rating",
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJhZG1pbkByb3NzLmNvbSIsInJvbGUiOiJBRE1JTiIsImlhdCI6MTcxNTM1MTUxMCwiZXhwIjoxNzE1NDM3OTEwfQ.nod57cyWORR2raUTbO_LqdM27N5j2faXksxPPEJeb08"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "comment",
							"value": "Фиии :(",
							"type": "text"
						},
						{
							"key": "rating",
							"value": "1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "localhost:7000/api/rating/18",
					"host": [
						"localhost"
					],
					"port": "7000",
					"path": [
						"api",
						"rating",
						"18"
					]
				}
			},
			"response": []
		},
		{
			"name": "get ratings",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:7000/api/rating",
					"host": [
						"localhost"
					],
					"port": "7000",
					"path": [
						"api",
						"rating"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}